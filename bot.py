import os
import logging
import schedule
import time
import threading
import asyncio
import sys
import psutil
from datetime import datetime, timedelta
from warnings import filterwarnings

from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ConversationHandler
from telegram.warnings import PTBUserWarning
from telegram.error import Conflict, NetworkError, TelegramError

# –Ü–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å –ø—Ä–æ CallbackQueryHandler –≤ ConversationHandler
filterwarnings(action="ignore", message=r".*CallbackQueryHandler", category=PTBUserWarning)

import config
import handlers
from database import generate_daily_test_for_all_users, send_reminder_to_users

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


def run_scheduler():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
    while True:
        schedule.run_pending()
        time.sleep(60)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É


async def send_daily_tests():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ —â–æ–¥–µ–Ω–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤"""
    logger.info("–†–æ–∑—Å–∏–ª–∫–∞ —â–æ–¥–µ–Ω–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤...")
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —â–æ–¥–µ–Ω–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        users_with_tests = generate_daily_test_for_all_users()
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
        bot = Bot(token=config.TELEGRAM_TOKEN)
        for user_id, telegram_id in users_with_tests:
            try:
                await bot.send_message(
                    chat_id=telegram_id,
                    text="–ü—Ä–∏–≤—ñ—Ç! üåü –¢–≤—ñ–π —â–æ–¥–µ–Ω–Ω–∏–π —Ç–µ—Å—Ç –≤–∂–µ —á–µ–∫–∞—î –Ω–∞ —Ç–µ–±–µ! –ì–æ—Ç–æ–≤–∏–π –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤–æ—ó –∑–Ω–∞–Ω–Ω—è? –ù–∞—Ç–∏—Å–∫–∞–π /test! üöÄ"
                )
                logger.info(f"–¢–µ—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {telegram_id}")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ç–µ—Å—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {telegram_id}: {str(e)}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Å–∏–ª—Ü—ñ —â–æ–¥–µ–Ω–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤: {str(e)}")


async def send_reminders():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ –Ω–µ–ø—Ä–æ–π–¥–µ–Ω—ñ —Ç–µ—Å—Ç–∏"""
    logger.info("–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å...")
    try:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –Ω–µ –ø—Ä–æ–π—à–ª–∏ —Ç–µ—Å—Ç
        users_to_remind = send_reminder_to_users()
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
        bot = Bot(token=config.TELEGRAM_TOKEN)
        for telegram_id in users_to_remind:
            try:
                await bot.send_message(
                    chat_id=telegram_id,
                    text="–ì–µ–π! üëã –ù–µ –∑–∞–±—É–≤–∞–π –ø—Ä–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π —Ç–µ—Å—Ç! –©–µ —î —á–∞—Å –ø–æ–∫–∞–∑–∞—Ç–∏, –Ω–∞ —â–æ —Ç–∏ –∑–¥–∞—Ç–Ω–∏–π! üí™ –ñ–º–∏ /test!"
                )
                logger.info(f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {telegram_id}")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {telegram_id}: {str(e)}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å: {str(e)}")


def setup_scheduler():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –∑–∞–≤–¥–∞–Ω—å"""
    # –†–æ–∑—Å–∏–ª–∫–∞ —â–æ–¥–µ–Ω–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤ –æ 12:00
    schedule.every().day.at(config.DAILY_TEST_TIME).do(lambda: asyncio.run(send_daily_tests()))
    
    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –æ 18:00
    schedule.every().day.at(config.REMINDER_TIME).do(lambda: asyncio.run(send_reminders()))
    
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    scheduler_thread = threading.Thread(target=run_scheduler)
    scheduler_thread.daemon = True
    scheduler_thread.start()
    logger.info("–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–≤–¥–∞–Ω—å –∑–∞–ø—É—â–µ–Ω–æ")


def is_bot_already_running():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
    current_process = psutil.Process(os.getpid())
    current_process_name = current_process.name()
    
    for process in psutil.process_iter(['pid', 'name', 'cmdline']):
        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ—Ü–µ—Å
        if process.info['pid'] == current_process.pid:
            continue
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ Python –ø—Ä–æ—Ü–µ—Å
        if process.info['name'] == current_process_name:
            try:
                cmdline = process.info['cmdline']
                if cmdline and len(cmdline) > 1 and 'bot.py' in cmdline[-1]:
                    logger.warning(f"–ó–Ω–∞–π–¥–µ–Ω–æ —ñ–Ω—à–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (PID: {process.info['pid']})")
                    return True
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                continue
    
    return False


async def error_handler(update, context):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ –¥–ª—è –±–æ—Ç–∞"""
    try:
        raise context.error
    except Conflict:
        logger.error("–ö–æ–Ω—Ñ–ª—ñ–∫—Ç: —ñ–Ω—à–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...")
        # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–∏
        sys.exit(1)
    except NetworkError:
        logger.error("–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")
    except TelegramError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ Telegram API: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: {e}")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    if is_bot_already_running():
        logger.error("–Ü–Ω—à–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...")
        sys.exit(1)
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    handlers.init_database()
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É
    application = Application.builder().token(config.TELEGRAM_TOKEN).build()
    
    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–º–∏–ª–æ–∫
    application.add_error_handler(error_handler)
    
    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("help", handlers.help_command))
    application.add_handler(CommandHandler("knowledge", handlers.knowledge_base))
    application.add_handler(CommandHandler("statistics", handlers.statistics))
    
    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
    application.add_handler(CommandHandler("test", handlers.daily_test))
    
    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    registration_handler = ConversationHandler(
        entry_points=[CommandHandler("start", handlers.start)],
        states={
            handlers.REGISTRATION_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.register_name)],
            handlers.REGISTRATION_CITY: [CallbackQueryHandler(handlers.register_city, pattern=r'^city_')],
            handlers.REGISTRATION_POSITION: [CallbackQueryHandler(handlers.register_position, pattern=r'^position_')],
        },
        fallbacks=[CommandHandler("cancel", handlers.cancel)]
    )
    application.add_handler(registration_handler)
    
    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É
    feedback_handler = ConversationHandler(
        entry_points=[CommandHandler("feedback", handlers.feedback_command)],
        states={
            handlers.FEEDBACK_CATEGORY: [CallbackQueryHandler(handlers.select_feedback_category, pattern=r'^feedback_')],
            handlers.FEEDBACK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.handle_feedback)],
        },
        fallbacks=[CommandHandler("cancel", handlers.cancel)]
    )
    application.add_handler(feedback_handler)
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ —Ç–µ—Å—Ç–∏
    application.add_handler(CallbackQueryHandler(handlers.handle_answer, pattern=f"^{handlers.CALLBACK_OPTION_PREFIX}"))
    application.add_handler(CallbackQueryHandler(handlers.next_question, pattern=f"^{handlers.CALLBACK_NEXT_QUESTION}$"))
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –±–∞–∑–∏ –∑–Ω–∞–Ω—å
    application.add_handler(CallbackQueryHandler(handlers.knowledge_category, pattern=f"^{handlers.CALLBACK_KNOWLEDGE_CATEGORY}"))
    application.add_handler(CallbackQueryHandler(handlers.knowledge_item, pattern=f"^{handlers.CALLBACK_KNOWLEDGE_ITEM}"))
    application.add_handler(CallbackQueryHandler(handlers.knowledge_back, pattern=r'^knowledge_back$'))
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥—É
    application.add_handler(CallbackQueryHandler(handlers.ranking, pattern=f"^{handlers.CALLBACK_RANKING}$"))
    application.add_handler(CallbackQueryHandler(handlers.statistics_back, pattern=f"^statistics_back$"))
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É
    application.add_handler(CallbackQueryHandler(handlers.handle_feedback_category, pattern=r'^feedback_(tech|content|suggestions|thanks|other)$'))
    
    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç—É –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.handle_feedback_text))
    
    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    application.add_handler(CallbackQueryHandler(handlers.handle_main_menu, pattern=r'^(test|knowledge|statistics|feedback_menu|feedback|help|main_menu)$'))
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
    setup_scheduler()
    
    try:
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        application.run_polling()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    except Conflict:
        logger.error("–ö–æ–Ω—Ñ–ª—ñ–∫—Ç: —ñ–Ω—à–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...")
        sys.exit(1)
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()