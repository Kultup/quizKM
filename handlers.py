from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import CallbackContext, ConversationHandler
from datetime import datetime, timedelta
import logging

import database as db
from models import create_tables, Feedback

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# –°—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler
REGISTRATION_NAME, REGISTRATION_CITY, REGISTRATION_POSITION = range(3)
QUESTION_ANSWERING, FEEDBACK_CATEGORY, FEEDBACK = range(3, 6)
WAITING_FEEDBACK_TEXT = 6

# Callback data –¥–ª—è –∫–Ω–æ–ø–æ–∫
CALLBACK_OPTION_PREFIX = 'option_'
CALLBACK_NEXT_QUESTION = 'next_question'
CALLBACK_KNOWLEDGE_CATEGORY = 'knowledge_cat_'
CALLBACK_KNOWLEDGE_ITEM = 'knowledge_item_'
CALLBACK_FEEDBACK = 'feedback'
CALLBACK_STATISTICS = 'statistics'
CALLBACK_RANKING = 'ranking'
CALLBACK_MAIN_MENU = 'main_menu'
CALLBACK_TEST = 'test'
CALLBACK_KNOWLEDGE = 'knowledge'
CALLBACK_FEEDBACK_MENU = 'feedback_menu'


# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async def show_main_menu(update: Update, context: CallbackContext, message_text: str = None):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data=CALLBACK_TEST)],
        [InlineKeyboardButton("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω—å", callback_data=CALLBACK_KNOWLEDGE)],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=CALLBACK_STATISTICS)],
        [InlineKeyboardButton("üí¨ –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫", callback_data=CALLBACK_FEEDBACK_MENU)],
        [InlineKeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if message_text is None:
        message_text = "üè† <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n–û–±–∏—Ä–∞–π, —â–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏:"
    
    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    elif hasattr(update, 'message') and update.message:
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )


async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    if not hasattr(update, 'message') or not update.message:
        return
        
    user = update.effective_user
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    db_user = db.get_user_by_telegram_id(user.id)
    
    if db_user:
        welcome_message = f"–ü—Ä–∏–≤—ñ—Ç, {db_user.first_name}! üëã\n\n–ö–ª–∞—Å, —â–æ —Ç–∏ —Ç—É—Ç! –¢–∏ –≤–∂–µ –≤ –Ω–∞—à—ñ–π –∫–æ–º–∞–Ω–¥—ñ üòä"
        await show_main_menu(update, context, welcome_message)
    else:
        await update.message.reply_text(
            f"–ü—Ä–∏–≤—ñ—Ç! ü§ó\n\n"
            f"–°—É–ø–µ—Ä, —â–æ —Ç–∏ –≤–∏—Ä—ñ—à–∏–≤ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –Ω–∞—Å! –î–∞–≤–∞–π –∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è üòä\n\n"
            f"–ù–∞–ø–∏—à–∏ —Å–≤–æ—î —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:"
        )
        return REGISTRATION_NAME


async def register_name(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–∞"""
    if not hasattr(update, 'message') or not update.message:
        return ConversationHandler.END
        
    full_name = update.message.text.strip()
    name_parts = full_name.split()
    
    if len(name_parts) < 2:
        await update.message.reply_text(
            "–û–π, –∑–¥–∞—î—Ç—å—Å—è —Ç–∏ –∑–∞–±—É–≤ –ø—Ä—ñ–∑–≤–∏—â–µ! üòÖ\n\n–ù–∞–ø–∏—à–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ —Ä–∞–∑–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ):"
        )
        return REGISTRATION_NAME
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
    context.user_data['first_name'] = name_parts[0]
    context.user_data['last_name'] = ' '.join(name_parts[1:])
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º—ñ—Å—Ç –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    cities = db.get_cities()
    
    if not cities:
        await update.message.reply_text(
            "–£–ø—Å! üòî –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º—ñ—Å—Ç. –ù–∞–ø–∏—à–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É, –≤—ñ–Ω —à–≤–∏–¥–∫–æ –≤—Å–µ –Ω–∞–ª–∞—à—Ç—É—î!"
        )
        return ConversationHandler.END
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞
    keyboard = []
    for city in cities:
        keyboard.append([InlineKeyboardButton(city.name, callback_data=f"city_{city.id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–ß—É–¥–æ–≤–æ, {context.user_data['first_name']}! üéâ\n\n–¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏ —Å–≤–æ—î –º—ñ—Å—Ç–æ:",
        reply_markup=reply_markup
    )
    return REGISTRATION_CITY


async def register_city(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    city_id = query.data.split('_')[1]
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º—ñ—Å—Ç–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    cities = db.get_cities()
    selected_city = next((city for city in cities if str(city.id) == city_id), None)
    
    if not selected_city:
        await query.edit_message_text(
            "–û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –∑ –º—ñ—Å—Ç–æ–º! üòÖ –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑, –±—É–¥—å –ª–∞—Å–∫–∞."
        )
        return REGISTRATION_CITY
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
    context.user_data['city'] = selected_city.name
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∞–¥ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    positions = db.get_positions()
    
    if not positions:
        await query.edit_message_text(
            "–£–ø—Å! üòî –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–æ—Å–∞–¥. –ù–∞–ø–∏—à–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É, –≤—ñ–Ω —à–≤–∏–¥–∫–æ –≤—Å–µ –Ω–∞–ª–∞—à—Ç—É—î!"
        )
        return ConversationHandler.END
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –ø–æ—Å–∞–¥–∏
    keyboard = []
    for position in positions:
        keyboard.append([InlineKeyboardButton(position.name, callback_data=f"position_{position.id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "–°—É–ø–µ—Ä! üëç –¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏ —Å–≤–æ—é –ø–æ—Å–∞–¥—É:",
        reply_markup=reply_markup
    )
    return REGISTRATION_POSITION


async def register_position(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –ø–æ—Å–∞–¥–∏"""
    query = update.callback_query
    await query.answer()
    
    position_id = query.data.split('_')[1]
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∞–¥–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    positions = db.get_positions()
    selected_position = next((position for position in positions if str(position.id) == position_id), None)
    
    if not selected_position:
        await query.edit_message_text(
            "–û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –∑ –ø–æ—Å–∞–¥–æ—é! üòÖ –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑, –±—É–¥—å –ª–∞—Å–∫–∞."
        )
        return REGISTRATION_POSITION
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
    context.user_data['position'] = selected_position.name
    
    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    try:
        user = db.register_user(
            telegram_id=query.from_user.id,
            first_name=context.user_data['first_name'],
            last_name=context.user_data['last_name'],
            city=context.user_data['city'],
            position=selected_position.name
        )
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
        registration_message = (
            f"–£—Ä–∞! {user.first_name}, —Ç–∏ —Ç–µ–ø–µ—Ä —á–∞—Å—Ç–∏–Ω–∞ –Ω–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏! üéâ\n\n"
            f"–ö–æ–∂–µ–Ω –¥–µ–Ω—å –æ 12:00 —è –±—É–¥—É –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ç–æ–±—ñ —Ü—ñ–∫–∞–≤—ñ —Ç–µ—Å—Ç–∏. "
            f"–ü–µ—Ä—à–∏–π —Ç–µ—Å—Ç –æ—Ç—Ä–∏–º–∞—î—à –∑–∞–≤—Ç—Ä–∞! üìö\n\n"
            f"üè† <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n–û–±–∏—Ä–∞–π, —â–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data=CALLBACK_TEST)],
            [InlineKeyboardButton("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω—å", callback_data=CALLBACK_KNOWLEDGE)],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=CALLBACK_STATISTICS)],
            [InlineKeyboardButton("üí¨ –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫", callback_data=CALLBACK_FEEDBACK_MENU)],
            [InlineKeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            registration_message,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        await query.edit_message_text(
            f"–û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫! üòî –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ.\n"
            f"–ü–æ–º–∏–ª–∫–∞: {str(e)}"
        )
    
    return ConversationHandler.END


async def handle_main_menu(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    if query.data == CALLBACK_TEST:
        await daily_test_button(update, context)
    elif query.data == CALLBACK_KNOWLEDGE:
        await knowledge_base_button(update, context)
    elif query.data == CALLBACK_STATISTICS:
        await statistics_button(update, context)
    elif query.data == CALLBACK_FEEDBACK_MENU:
        await feedback_button(update, context)
    elif query.data == CALLBACK_FEEDBACK:
        await feedback_button(update, context)
    elif query.data == "help":
        await help_button(update, context)
    elif query.data == CALLBACK_MAIN_MENU:
        await show_main_menu(update, context)


async def daily_test_button(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç—É"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
    db_user = db.get_user_by_telegram_id(user_id)
    if not db_user:
        await query.edit_message_text(
            "–û–π! üòÖ –ó–¥–∞—î—Ç—å—Å—è, —Ç–∏ —â–µ –Ω–µ –≤ –Ω–∞—à—ñ–π –∫–æ–º–∞–Ω–¥—ñ. –ù–∞—Ç–∏—Å–Ω–∏ /start, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è!"
        )
        return
    
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —ñ—Å–Ω—É—é—á—É –ª–æ–≥—ñ–∫—É —Ç–µ—Å—Ç—É
    await daily_test_logic(update, context)


async def daily_test_logic(update: Update, context: CallbackContext):
    """–õ–æ–≥—ñ–∫–∞ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç—É"""
    from datetime import datetime, time
    import config
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ user_id –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É update
    if hasattr(update, 'callback_query') and update.callback_query:
        user_id = update.callback_query.from_user.id
        user = update.callback_query.from_user
    else:
        user_id = update.message.from_user.id
        user = update.effective_user
    
    db_user = db.get_user_by_telegram_id(user_id)
    
    if not db_user:
        message_text = "–û–π! üòÖ –ó–¥–∞—î—Ç—å—Å—è, —Ç–∏ —â–µ –Ω–µ –≤ –Ω–∞—à—ñ–π –∫–æ–º–∞–Ω–¥—ñ. –ù–∞—Ç–∏—Å–Ω–∏ /start, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è!"
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(message_text)
        elif hasattr(update, 'message') and update.message:
            await update.message.reply_text(message_text)
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω—É (00:00 –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –¥–Ω—è)
    now = datetime.now()
    current_date = now.date()
    deadline_time = time(config.DEADLINE_HOUR, config.DEADLINE_MINUTE)
    
    # –Ø–∫—â–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –ø—ñ—Å–ª—è –æ–ø—ñ–≤–Ω–æ—á—ñ (00:00), —Ç–æ –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –≤—á–æ—Ä–∞—à–Ω—å–æ–≥–æ –¥–Ω—è –≤–∂–µ –º–∏–Ω—É–≤
    if now.time() >= deadline_time and config.DEADLINE_HOUR == 0:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–π —Ç–µ—Å—Ç –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –¥–Ω—è
        from datetime import timedelta
        from models import DailyTest
        session = db.get_session()
        try:
            yesterday = current_date - timedelta(days=1)
            yesterday_test = session.query(DailyTest).filter(
                DailyTest.user_id == db_user.id,
                DailyTest.date >= yesterday,
                DailyTest.date < current_date,
                DailyTest.is_completed == False
            ).first()
            
            if yesterday_test:
                # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —Ç–µ—Å—Ç —è–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π (–Ω–µ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏–π)
                yesterday_test.is_completed = True
                yesterday_test.score = 0
                session.commit()
                
                message_text = (
                    "‚è∞ –ù–∞ –∂–∞–ª—å, —á–∞—Å –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –≤—á–æ—Ä–∞—à–Ω—å–æ–≥–æ —Ç–µ—Å—Ç—É –≤–∏–π—à–æ–≤ (–¥–µ–¥–ª–∞–π–Ω: 00:00). "
                    "–¢–µ—Å—Ç –Ω–µ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏–π. –ê–ª–µ –Ω–µ –∑–∞—Å–º—É—á—É–π—Å—è - —Å—å–æ–≥–æ–¥–Ω—ñ —É —Ç–µ–±–µ —î –Ω–æ–≤–∏–π —à–∞–Ω—Å! üí™"
                )
                
                if hasattr(update, 'callback_query') and update.callback_query:
                    await update.callback_query.edit_message_text(message_text)
                elif hasattr(update, 'message') and update.message:
                    await update.message.reply_text(message_text)
        finally:
            session.close()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∞–±–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç—É
    try:
        daily_test = db.generate_daily_test(db_user.id)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ç–µ—Å—Ç –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        if daily_test.is_completed:
            test_results = db.get_test_results(daily_test.id)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
            keyboard = [[InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data=CALLBACK_MAIN_MENU)]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            message_text = (
                f"–¢–∏ –≤–∂–µ –º–æ–ª–æ–¥–µ—Ü—å - –ø—Ä–æ–π—à–æ–≤ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π —Ç–µ—Å—Ç! ‚úÖ\n\n"
                f"–¢–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {test_results['score']} –∑ {test_results['total_questions']} –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. –ö—Ä—É—Ç–æ! üéâ"
            )
            
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)
            elif hasattr(update, 'message') and update.message:
                await update.message.reply_text(message_text, reply_markup=reply_markup)
            return
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è ID —Ç–µ—Å—Ç—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
        context.user_data['daily_test_id'] = daily_test.id
        context.user_data['current_question'] = 0
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—à–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
        await send_test_question(update, context)
        
        return QUESTION_ANSWERING
    except Exception as e:
        message_text = (
            f"–û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –∑ —Ç–µ—Å—Ç–æ–º! üòî –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ.\n"
            f"–ü–æ–º–∏–ª–∫–∞: {str(e)}"
        )
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(message_text)
        elif hasattr(update, 'message') and update.message:
            await update.message.reply_text(message_text)


async def daily_test(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /test –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç—É"""
    await daily_test_logic(update, context)


async def knowledge_base_button(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ –±–∞–∑–∏ –∑–Ω–∞–Ω—å"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
    db_user = db.get_user_by_telegram_id(user_id)
    if not db_user:
        await query.edit_message_text(
            "–û–π! üòÖ –ó–¥–∞—î—Ç—å—Å—è, —Ç–∏ —â–µ –Ω–µ –≤ –Ω–∞—à—ñ–π –∫–æ–º–∞–Ω–¥—ñ. –ù–∞—Ç–∏—Å–Ω–∏ /start, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è!"
        )
        return
    
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —ñ—Å–Ω—É—é—á—É –ª–æ–≥—ñ–∫—É –±–∞–∑–∏ –∑–Ω–∞–Ω—å
    await knowledge_base_logic(update, context)


async def statistics_button(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
    db_user = db.get_user_by_telegram_id(user_id)
    if not db_user:
        await query.edit_message_text(
            "–û–π! üòÖ –ó–¥–∞—î—Ç—å—Å—è, —Ç–∏ —â–µ –Ω–µ –≤ –Ω–∞—à—ñ–π –∫–æ–º–∞–Ω–¥—ñ. –ù–∞—Ç–∏—Å–Ω–∏ /start, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è!"
        )
        return
    
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —ñ—Å–Ω—É—é—á—É –ª–æ–≥—ñ–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await statistics_logic(update, context)


async def feedback_button(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
    db_user = db.get_user_by_telegram_id(user_id)
    if not db_user:
        await query.edit_message_text(
            "‚ùå –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /start –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."
        )
        return
    
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —ñ—Å–Ω—É—é—á—É –ª–æ–≥—ñ–∫—É –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É
    await feedback_logic(update, context)


async def help_button(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–ø–æ–º–æ–≥–∏"""
    query = update.callback_query
    await query.answer()
    
    help_text = (
        "üìã <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "üîπ <b>–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç</b> - —â–æ–¥–µ–Ω–Ω–∏–π —Ç–µ—Å—Ç, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤–æ—ó –∑–Ω–∞–Ω–Ω—è üß†\n"
        "üîπ <b>–ë–∞–∑–∞ –∑–Ω–∞–Ω—å</b> - —Ç—É—Ç –∑–Ω–∞–π–¥–µ—à –∫–æ—Ä–∏—Å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ üìö\n"
        "üîπ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –ø–æ–¥–∏–≤–∏—Å—è –Ω–∞ —Å–≤–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å üìä\n"
        "üîπ <b>–ó–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫</b> - –ø–æ–¥—ñ–ª–∏—Å—è –¥—É–º–∫–∞–º–∏ –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è–º–∏ üí¨\n\n"
        "–©–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é, –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ! üòä"
    )
    
    keyboard = [[InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data=CALLBACK_MAIN_MENU)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        help_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )


async def send_test_question(update: Update, context: CallbackContext):
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–∏—Ç–∞–Ω–Ω—è —Ç–µ—Å—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
    daily_test_id = context.user_data.get('daily_test_id')
    question_index = context.user_data.get('current_question', 0)
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è
    question_data = db.get_test_question(daily_test_id, question_index)
    if not question_data:
        message_text = "–û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –∑ –ø–∏—Ç–∞–Ω–Ω—è–º! üòî –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ."
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text(message_text)
        elif hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(message_text)
        return
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ç–µ—Å—Ç—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
    context.user_data['current_test_result_id'] = question_data['test_result_id']
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    keyboard = []
    for option in question_data['options']:
        # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É —Ç–µ–∫—Å—Ç—É –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ —á–∏—Ç–∞–Ω–Ω—è
        display_text = option.text
        if len(display_text) > 25:
            display_text = display_text[:22] + "..."
        
        keyboard.append([InlineKeyboardButton(
            display_text, callback_data=f"{CALLBACK_OPTION_PREFIX}{option.id}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–∏—Ç–∞–Ω–Ω—è
    question = question_data['question']
    message_text = f"–ü–∏—Ç–∞–Ω–Ω—è {question_index + 1}/5:\n\n{question.text}"
    
    if hasattr(update, 'message') and update.message:
        await update.message.reply_text(message_text, reply_markup=reply_markup)
    elif hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)


async def handle_answer(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è —Ç–µ—Å—Ç—É"""
    query = update.callback_query
    await query.answer()
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –≤–∏–±—Ä–∞–Ω–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É
    option_id = int(query.data.replace(CALLBACK_OPTION_PREFIX, ''))
    test_result_id = context.user_data.get('current_test_result_id')
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    try:
        answer_result = db.answer_question(test_result_id, option_id)
        
        # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if answer_result['is_correct']:
            result_text = "‚úÖ –°—É–ø–µ—Ä! –ü—Ä–∞–≤–∏–ª—å–Ω–æ! "
        else:
            result_text = f"‚ùå –û–π, –Ω–µ –∑–æ–≤—Å—ñ–º. {answer_result.get('explanation', '')}"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        if answer_result['test_completed']:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–µ—Å—Ç—É
            daily_test_id = context.user_data.get('daily_test_id')
            test_results = db.get_test_results(daily_test_id)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç–µ—Å—Ç—É
            keyboard = [
                [InlineKeyboardButton("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω—å", callback_data=CALLBACK_KNOWLEDGE)],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=CALLBACK_STATISTICS)],
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data=CALLBACK_MAIN_MENU)]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"{result_text}\n\n"
                f"üéâ –£—Ä–∞! –¢–∏ –∑–∞–≤–µ—Ä—à–∏–≤ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π —Ç–µ—Å—Ç!\n\n"
                f"–¢–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {test_results['score']} –∑ {test_results['total_questions']} –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. –ú–æ–ª–æ–¥–µ—Ü—å! üëè",
                reply_markup=reply_markup
            )
            return ConversationHandler.END
        else:
            # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
            keyboard = [[InlineKeyboardButton("–ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è", callback_data=CALLBACK_NEXT_QUESTION)]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"{result_text}\n\n–ì–æ—Ç–æ–≤–∏–π –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è? –ù–∞—Ç–∏—Å–∫–∞–π! üöÄ",
                reply_markup=reply_markup
            )
    except Exception as e:
        await query.edit_message_text(
            f"–û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é! üòî –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ.\n"
            f"–ü–æ–º–∏–ª–∫–∞: {str(e)}"
        )
        return ConversationHandler.END


async def next_question(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è"""
    query = update.callback_query
    await query.answer()
    
    # –ó–±—ñ–ª—å—à–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
    context.user_data['current_question'] = context.user_data.get('current_question', 0) + 1
    
    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
    await send_test_question(update, context)


async def knowledge_base_logic(update: Update, context: CallbackContext):
    """–õ–æ–≥—ñ–∫–∞ —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –∑–Ω–∞–Ω—å"""
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ user_id –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É update
    if hasattr(update, 'callback_query') and update.callback_query:
        user_id = update.callback_query.from_user.id
        user = update.callback_query.from_user
    else:
        user_id = update.message.from_user.id
        user = update.effective_user
    
    db_user = db.get_user_by_telegram_id(user_id)
    
    if not db_user:
        message_text = "–û–π! üòÖ –ó–¥–∞—î—Ç—å—Å—è, —Ç–∏ —â–µ –Ω–µ –≤ –Ω–∞—à—ñ–π –∫–æ–º–∞–Ω–¥—ñ. –ù–∞—Ç–∏—Å–Ω–∏ /start, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è!"
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(message_text)
        elif hasattr(update, 'message') and update.message:
            await update.message.reply_text(message_text)
        return
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –±–∞–∑–∏ –∑–Ω–∞–Ω—å
    categories = db.get_knowledge_categories()
    
    if not categories:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data=CALLBACK_MAIN_MENU)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = "–û–π, –±–∞–∑–∞ –∑–Ω–∞–Ω—å –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—è! üìö –ê–ª–µ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —Å–∫–æ—Ä–æ —Ç—É—Ç –∑'—è–≤–ª—è—Ç—å—Å—è —Ü—ñ–∫–∞–≤—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏! üòä"
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)
        elif hasattr(update, 'message') and update.message:
            await update.message.reply_text(message_text, reply_markup=reply_markup)
        return
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
    keyboard = []
    for category in categories:
        keyboard.append([InlineKeyboardButton(
            category.name, callback_data=f"{CALLBACK_KNOWLEDGE_CATEGORY}{category.id}"
        )])
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data=CALLBACK_MAIN_MENU)])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = "üìö <b>–ë–∞–∑–∞ –∑–Ω–∞–Ω—å</b>\n\n–û–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, —è–∫–∞ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:"
    
    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    elif hasattr(update, 'message') and update.message:
        await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)


async def handle_feedback_category(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É"""
    query = update.callback_query
    await query.answer()
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ callback_data
    category_map = {
        "feedback_tech": "–¢–µ—Ö–Ω—ñ—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è",
        "feedback_content": "–ü–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –∫–æ–Ω—Ç–µ–Ω—Ç",
        "feedback_suggestions": "–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó",
        "feedback_thanks": "–ü–æ–¥—è–∫–∏",
        "feedback_other": "–Ü–Ω—à–µ"
    }
    
    selected_category = category_map.get(query.data, "–Ü–Ω—à–µ")
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
    context.user_data['feedback_category'] = selected_category
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data=CALLBACK_FEEDBACK)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = (
        f"üí¨ <b>–ó–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫ - {selected_category}</b>\n\n"
        "–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è! –Ø –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∫–æ–º–∞–Ω–¥—ñ, —ñ –º–∏ –≤—ñ–¥–ø–æ–≤—ñ–º–æ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ. üòä\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
    )
    
    await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
    context.user_data['state'] = WAITING_FEEDBACK_TEXT


async def handle_feedback_text(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É"""
    if context.user_data.get('state') != WAITING_FEEDBACK_TEXT:
        return
    
    user_id = update.message.from_user.id
    feedback_text = update.message.text
    feedback_category = context.user_data.get('feedback_category', '–Ü–Ω—à–µ')
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
    db_user = db.get_user_by_telegram_id(user_id)
    if not db_user:
        await update.message.reply_text("–û–π! üòÖ –ó–¥–∞—î—Ç—å—Å—è, —Ç–∏ —â–µ –Ω–µ –≤ –Ω–∞—à—ñ–π –∫–æ–º–∞–Ω–¥—ñ. –ù–∞—Ç–∏—Å–Ω–∏ /start, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è!")
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–≥—É–∫ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    try:
        feedback = db.add_feedback(
            user_id=db_user.id,
            text=feedback_text,
            feedback_type=feedback_category
        )
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data=CALLBACK_MAIN_MENU)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ –î—è–∫—É—é –∑–∞ —Ç–≤—ñ–π –≤—ñ–¥–≥—É–∫ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{feedback_category}'! üôè\n\n"
            "–¢–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —ñ –±—É–¥–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º. –¢–∏ —Å—É–ø–µ—Ä! üòä",
            reply_markup=reply_markup
        )
        
        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
        context.user_data.pop('state', None)
        context.user_data.pop('feedback_category', None)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫—É: {e}")
        await update.message.reply_text("–û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ç–≤–æ–≥–æ –≤—ñ–¥–≥—É–∫—É! üòî –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")


async def knowledge_base(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /knowledge –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –±–∞–∑–∏ –∑–Ω–∞–Ω—å"""
    await knowledge_base_logic(update, context)


async def statistics_logic(update: Update, context: CallbackContext):
    """–õ–æ–≥—ñ–∫–∞ —Ä–æ–±–æ—Ç–∏ –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é"""
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ user_id –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É update
    if hasattr(update, 'callback_query') and update.callback_query:
        user_id = update.callback_query.from_user.id
        user = update.callback_query.from_user
    else:
        user_id = update.message.from_user.id
        user = update.effective_user
    
    db_user = db.get_user_by_telegram_id(user_id)
    
    if not db_user:
        message_text = "–û–π! üòÖ –ó–¥–∞—î—Ç—å—Å—è, —Ç–∏ —â–µ –Ω–µ –≤ –Ω–∞—à—ñ–π –∫–æ–º–∞–Ω–¥—ñ. –ù–∞—Ç–∏—Å–Ω–∏ /start, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è!"
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(message_text)
        elif hasattr(update, 'message') and update.message:
            await update.message.reply_text(message_text)
        return
    
    try:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        stats = db.get_user_statistics(db_user.id)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –æ–ø—Ü—ñ–π
        keyboard = [
            [InlineKeyboardButton("üìà –†–µ–π—Ç–∏–Ω–≥", callback_data=CALLBACK_RANKING)],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data=CALLBACK_MAIN_MENU)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            f"üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üë§ –Ü–º'—è: {db_user.first_name}\n"
            f"üè¢ –ú—ñ—Å—Ç–æ: {db_user.city}\n"
            f"üíº –ü–æ—Å–∞–¥–∞: {db_user.position}\n\n"
            f"üìù –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç—ñ–≤: {stats.get('tests_completed', 0)} üéØ\n"
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {stats.get('correct_answers', 0)}\n"
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {stats.get('incorrect_answers', 0)}\n"
            f"üìà –°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª: {stats.get('average_score', 0):.1f}% (—Ç–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏!)\n"
            f"üî• –ü–æ—Ç–æ—á–Ω–∞ —Å–µ—Ä—ñ—è: {stats.get('current_streak', 0)} –¥–Ω—ñ–≤ –ø–æ—Å–ø—ñ–ª—å"
        )
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        elif hasattr(update, 'message') and update.message:
            await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
            
    except Exception as e:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data=CALLBACK_MAIN_MENU)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = f"–û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é! üòî –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.\n–ü–æ–º–∏–ª–∫–∞: {str(e)}"
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(message_text, reply_markup=reply_markup)


async def feedback_logic(update: Update, context: CallbackContext):
    """–õ–æ–≥—ñ–∫–∞ —Ä–æ–±–æ—Ç–∏ –∑—ñ –∑–≤–æ—Ä–æ—Ç–Ω–∏–º –∑–≤'—è–∑–∫–æ–º"""
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ user_id –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É update
    if hasattr(update, 'callback_query') and update.callback_query:
        user_id = update.callback_query.from_user.id
        user = update.callback_query.from_user
    else:
        user_id = update.message.from_user.id
        user = update.effective_user
    
    db_user = db.get_user_by_telegram_id(user_id)
    
    if not db_user:
        message_text = "–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(message_text)
        elif hasattr(update, 'message') and update.message:
            await update.message.reply_text(message_text)
        return
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É
    keyboard = [
        [InlineKeyboardButton("üîß –¢–µ—Ö–Ω—ñ—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="feedback_tech")],
        [InlineKeyboardButton("üìù –ü–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="feedback_content")],
        [InlineKeyboardButton("üí° –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó", callback_data="feedback_suggestions")],
        [InlineKeyboardButton("üôè –ü–æ–¥—è–∫–∏", callback_data="feedback_thanks")],
        [InlineKeyboardButton("‚ùì –Ü–Ω—à–µ", callback_data="feedback_other")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data=CALLBACK_MAIN_MENU)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = (
        "üí¨ <b>–ó–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫</b>\n\n"
        "–û–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Å–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:"
    )
    
    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    elif hasattr(update, 'message') and update.message:
        await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)


async def knowledge_category(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –±–∞–∑–∏ –∑–Ω–∞–Ω—å"""
    query = update.callback_query
    await query.answer()
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    category_id = int(query.data.replace(CALLBACK_KNOWLEDGE_CATEGORY, ''))
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –π–æ–≥–æ –ø–æ—Å–∞–¥–∏
    user = query.from_user
    db_user = db.get_user_by_telegram_id(user.id)
    
    if not db_user:
        await query.edit_message_text(
            "–û–π! üòÖ –ó–¥–∞—î—Ç—å—Å—è, —Ç–∏ —â–µ –Ω–µ –≤ –Ω–∞—à—ñ–π –∫–æ–º–∞–Ω–¥—ñ. –ù–∞—Ç–∏—Å–Ω–∏ /start, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è!"
        )
        return
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –±–∞–∑–∏ –∑–Ω–∞–Ω—å –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–æ—Å–∞–¥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    items = db.get_knowledge_items_by_category(category_id, db_user.position)
    
    if not items:
        await query.edit_message_text(
            "–£ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –¥–ª—è —Ç–≤–æ—î—ó –ø–æ—Å–∞–¥–∏. –°–ø—Ä–æ–±—É–π —ñ–Ω—à—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é! üòä\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /knowledge –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π."
        )
        return
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏
    keyboard = []
    for item in items:
        keyboard.append([InlineKeyboardButton(
            item.title, callback_data=f"{CALLBACK_KNOWLEDGE_ITEM}{item.id}"
        )])
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="knowledge_back")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "–û–±–∏—Ä–∞–π –º–∞—Ç–µ—Ä—ñ–∞–ª –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
        reply_markup=reply_markup
    )


async def knowledge_item(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –µ–ª–µ–º–µ–Ω—Ç—É –±–∞–∑–∏ –∑–Ω–∞–Ω—å"""
    query = update.callback_query
    await query.answer()
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –µ–ª–µ–º–µ–Ω—Ç—É
    item_id = int(query.data.replace(CALLBACK_KNOWLEDGE_ITEM, ''))
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –π–æ–≥–æ –ø–æ—Å–∞–¥–∏
    user = query.from_user
    db_user = db.get_user_by_telegram_id(user.id)
    
    if not db_user:
        await query.edit_message_text(
            "–û–π! üòÖ –ó–¥–∞—î—Ç—å—Å—è, —Ç–∏ —â–µ –Ω–µ –≤ –Ω–∞—à—ñ–π –∫–æ–º–∞–Ω–¥—ñ. –ù–∞—Ç–∏—Å–Ω–∏ /start, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è!"
        )
        return
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—É –±–∞–∑–∏ –∑–Ω–∞–Ω—å –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–æ—Å–∞–¥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    item = db.get_knowledge_item(item_id, db_user.position)
    
    if not item:
        await query.edit_message_text(
            "–ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª –∞–±–æ –≤—ñ–Ω –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –≤–∞—à–æ—ó –ø–æ—Å–∞–¥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª.\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /knowledge –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π."
        )
        return
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∫–Ω–æ–ø–∫–æ—é –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CALLBACK_KNOWLEDGE_CATEGORY}{item.category_id}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤–º—ñ—Å—Ç—É –µ–ª–µ–º–µ–Ω—Ç—É
    await query.edit_message_text(
        f"<b>{item.title}</b>\n\n{item.content}",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )


async def knowledge_back(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–≤—Ç–æ—Ä–Ω–∏–π –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó knowledge_base
    await knowledge_base(update, context)


async def statistics(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /statistics –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not hasattr(update, 'message') or not update.message:
        return
        
    user = update.effective_user
    db_user = db.get_user_by_telegram_id(user.id)
    
    if not db_user:
        await update.message.reply_text(
            "–û–π! üòÖ –ó–¥–∞—î—Ç—å—Å—è, —Ç–∏ —â–µ –Ω–µ –≤ –Ω–∞—à—ñ–π –∫–æ–º–∞–Ω–¥—ñ. –ù–∞—Ç–∏—Å–Ω–∏ /start, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è!"
        )
        return
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    stats = db.get_user_statistics(db_user.id)
    
    if not stats:
        await update.message.reply_text(
            "–û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é! üòî –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ."
        )
        return
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
    keyboard = [[InlineKeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥", callback_data=CALLBACK_RANKING)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üèÜ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {stats['total_score']} –±–∞–ª—ñ–≤\n"
        f"‚úÖ –¢–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {stats['tests_completed']}\n"
        f"‚ùå –¢–µ—Å—Ç—ñ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {stats['tests_missed']}\n"
        f"üìà –í—ñ–¥—Å–æ—Ç–æ–∫ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è: {stats['completion_rate']:.1f}%\n"
        f"üéØ –¢–æ—á–Ω—ñ—Å—Ç—å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å: {stats['week_accuracy']:.1f}%\n\n"
        f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π —Ä–µ–π—Ç–∏–Ω–≥ —Å–µ—Ä–µ–¥ —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤! üèÜ",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )


async def ranking(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ–≥–ª—è–¥—É —Ä–µ–π—Ç–∏–Ω–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    db_user = db.get_user_by_telegram_id(user.id)
    
    if not db_user:
        await query.edit_message_text(
            "–û–π! üòÖ –ó–¥–∞—î—Ç—å—Å—è, —Ç–∏ —â–µ –Ω–µ –≤ –Ω–∞—à—ñ–π –∫–æ–º–∞–Ω–¥—ñ. –ù–∞—Ç–∏—Å–Ω–∏ /start, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è!"
        )
        return
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    ranking_data = db.get_user_ranking(db_user.id)
    
    if not ranking_data:
        await query.edit_message_text(
            "–û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–º! üòî –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ."
        )
        return
    
    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    message = f"üèÜ <b>–†–µ–π—Ç–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</b>\n\n"
    
    # –¢–æ–ø-10 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    for user_data in ranking_data['top_users']:
        if user_data['position'] == ranking_data['user_position']:
            message += f"<b>{user_data['position']}. {user_data['name']} - {user_data['score']} –±–∞–ª—ñ–≤</b> (–¢–∏)\n"
        else:
            message += f"{user_data['position']}. {user_data['name']} - {user_data['score']} –±–∞–ª—ñ–≤\n"
    
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤ —Ç–æ–ø-10, –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ –ø–æ–∑–∏—Ü—ñ—é –æ–∫—Ä–µ–º–æ
    if ranking_data['user_position'] > 10:
        message += f"\n<b>{ranking_data['user_position']}. {db_user.first_name} {db_user.last_name} - {db_user.total_score} –±–∞–ª—ñ–≤</b> (–¢–∏)\n"
    
    message += f"\n–í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {ranking_data['total_users']}"
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∫–Ω–æ–ø–∫–æ—é –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data=CALLBACK_STATISTICS)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        message,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )


async def statistics_back(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–≤—Ç–æ—Ä–Ω–∏–π –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó statistics
    await statistics(update, context)


async def feedback_command(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /feedback –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É"""
    if not hasattr(update, 'message') or not update.message:
        return
        
    user = update.effective_user
    db_user = db.get_user_by_telegram_id(user.id)
    
    if not db_user:
        await update.message.reply_text(
            "–û–π! üòÖ –ó–¥–∞—î—Ç—å—Å—è, —Ç–∏ —â–µ –Ω–µ –≤ –Ω–∞—à—ñ–π –∫–æ–º–∞–Ω–¥—ñ. –ù–∞—Ç–∏—Å–Ω–∏ /start, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è!"
        )
        return
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É
    keyboard = [
        [InlineKeyboardButton("–¢–µ—Ö–Ω—ñ—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="feedback_tech")],
        [InlineKeyboardButton("–ü–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="feedback_content")],
        [InlineKeyboardButton("–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó", callback_data="feedback_suggestions")],
        [InlineKeyboardButton("–ü–æ–¥—è–∫–∏", callback_data="feedback_thanks")],
        [InlineKeyboardButton("–Ü–Ω—à–µ", callback_data="feedback_other")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É:",
        reply_markup=reply_markup
    )
    return FEEDBACK_CATEGORY


async def select_feedback_category(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    db_user = db.get_user_by_telegram_id(user.id)
    
    if not db_user:
        await query.edit_message_text(
            "–û–π! üòÖ –ó–¥–∞—î—Ç—å—Å—è, —Ç–∏ —â–µ –Ω–µ –≤ –Ω–∞—à—ñ–π –∫–æ–º–∞–Ω–¥—ñ. –ù–∞—Ç–∏—Å–Ω–∏ /start, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è!"
        )
        return ConversationHandler.END
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–±—Ä–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    category_data = query.data.split('_', 1)[1]
    categories = {
        'tech': '–¢–µ—Ö–Ω—ñ—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è',
        'content': '–ü–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –∫–æ–Ω—Ç–µ–Ω—Ç',
        'suggestions': '–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó',
        'thanks': '–ü–æ–¥—è–∫–∏',
        'other': '–Ü–Ω—à–µ'
    }
    
    category = categories.get(category_data, '–Ü–Ω—à–µ')
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
    context.user_data['feedback_category'] = category
    
    await query.edit_message_text(
        f"–¢–∏ –æ–±—Ä–∞–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: {category}\n\n–ù–∞–ø–∏—à–∏ —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫ –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é:"
    )
    return FEEDBACK


async def handle_feedback(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É"""
    if not hasattr(update, 'message') or not update.message:
        return ConversationHandler.END
        
    user = update.effective_user
    db_user = db.get_user_by_telegram_id(user.id)
    
    if not db_user:
        await update.message.reply_text(
            "–û–π! üòÖ –ó–¥–∞—î—Ç—å—Å—è, —Ç–∏ —â–µ –Ω–µ –≤ –Ω–∞—à—ñ–π –∫–æ–º–∞–Ω–¥—ñ. –ù–∞—Ç–∏—Å–Ω–∏ /start, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è!"
        )
        return ConversationHandler.END
    
    feedback_text = update.message.text.strip()
    
    if not feedback_text:
        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏ —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫ –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é:"
        )
        return FEEDBACK
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    feedback_category = context.user_data.get('feedback_category', '–Ü–Ω—à–µ')
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É
    try:
        db.add_feedback(db_user.id, feedback_text, feedback_type=feedback_category)
        
        await update.message.reply_text(
            f"–î—è–∫—É—é –∑–∞ —Ç–≤—ñ–π –≤—ñ–¥–≥—É–∫ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{feedback_category}'! üòä –ú–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤—Ä–∞—Ö—É—î–º–æ —Ç–≤–æ—é –¥—É–º–∫—É –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞.\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /test –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç—É.\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /knowledge –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –±–∞–∑–∏ –∑–Ω–∞–Ω—å.\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /statistics –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç–≤–æ—î—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
        )
    except Exception as e:
        await update.message.reply_text(
            f"–û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫—É! üòî –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.\n"
            f"–ü–æ–º–∏–ª–∫–∞: {str(e)}"
        )
    
    return ConversationHandler.END


async def help_command(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help"""
    if hasattr(update, 'message') and update.message:
        await update.message.reply_text(
            "üìö <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞</b>\n\n"
            "/start - –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º —Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è\n"
            "/test - –ü—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç—É\n"
            "/knowledge - –î–æ—Å—Ç—É–ø –¥–æ –±–∞–∑–∏ –∑–Ω–∞–Ω—å\n"
            "/statistics - –ü–µ—Ä–µ–≥–ª—è–¥ –≤–∞—à–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
            "/feedback - –ù–∞–¥–∞–Ω–Ω—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É\n\n"
            "–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –±–æ—Ç–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            parse_mode=ParseMode.HTML
        )


async def cancel(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏"""
    if hasattr(update, 'message') and update.message:
        await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /help –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥."
        )
    return ConversationHandler.END


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def init_database():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    try:
        create_tables()
        print("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞.")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {str(e)}")
        raise e